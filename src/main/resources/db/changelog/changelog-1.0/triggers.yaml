databaseChangeLog:
  - changeSet:
      id: create-adoption-requests-triggers
      author: Moleus
      changes:
        - sql:
            dbms: postgresql
            endDelimiter: "$$"
            splitStatements: true
            stripComments: true
            sql: >-
              CREATE OR REPLACE FUNCTION check_adoption_requests()
              RETURNS TRIGGER AS $$
                      BEGIN
                        IF NOT EXISTS (SELECT 1 FROM users WHERE id = NEW.customer_id AND role = 'CUSTOMER') THEN
                          RAISE EXCEPTION 'only user with role CUSTOMER can make adoption requests';
                        END IF;
                        IF NEW.manager_id IS NOT NULL THEN
                          IF NOT EXISTS (SELECT 1 FROM users WHERE id = NEW.manager_id AND role = 'ADOPTION_MANAGER') THEN
                            RAISE EXCEPTION 'only user with role ADOPTION_MANAGER can approve or deny adoption requests';
                          END IF;
                        END IF;
                RETURN NEW;
              END;
              $$ LANGUAGE plpgsql;

              CREATE TRIGGER check_adoption_requests_trigger
              BEFORE INSERT OR UPDATE ON adoption_requests
              FOR EACH ROW EXECUTE FUNCTION check_adoption_requests();

  - changeSet:
      id: create-check-transactions-triggers
      author: Moleus
      changes:
        - sql:
            dbms: postgresql
            endDelimiter: "$$"
            splitStatements: true
            stripComments: true
            sql: >-
              CREATE OR REPLACE FUNCTION check_transactions()
              RETURNS TRIGGER AS $$
                          BEGIN
                            IF NEW.is_donation THEN
                              IF NOT EXISTS (SELECT 1 FROM users WHERE id = NEW.user_id AND role = 'CUSTOMER') THEN
                                RAISE EXCEPTION 'only user with role CUSTOMER can make donations';
                              END IF;
                            ELSE
                              IF NOT EXISTS (SELECT 1 FROM users WHERE id = NEW.user_id AND role = 'EXPENSE_MANAGER') THEN
                                RAISE EXCEPTION 'only user with role EXPENSE_MANAGER can make expenses';
                              END IF;
                            END IF;
                RETURN NEW;
              END;
              $$ LANGUAGE plpgsql;
              
              CREATE TRIGGER check_transactions_trigger
              BEFORE INSERT OR UPDATE ON transactions
              FOR EACH ROW EXECUTE FUNCTION check_transactions();