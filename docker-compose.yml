x-defaults: &default-healthcheck
  healthcheck:
    test: ["CMD-SHELL", "curl -f http://localhost:${APP_SERVER_PORT}/actuator/health || exit 1"]
    interval: 10s
    timeout: 5s
    retries: 5

# а что на порту 9093?
x-kafka-cluster-envs: &kafka-cluster-envs
  KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
  KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
  KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
  KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 2  # at least 2 replicas should be in sync
  KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv
  KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
  KAFKA_CFG_PROCESS_ROLES: "controller,broker"
  KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093"

services:
  db:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_USERNAME:?error}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?error}
      POSTGRES_PORT: 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:15432:5432"
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME:?error} -d postgres" ]
      interval: 3s
      timeout: 5s
      retries: 5

  init-db:
    image: liquibase/liquibase:4.29
    restart: no
    depends_on:
      db:
        condition: service_healthy
    command:
      - --changeLogFile=${DB_CHANGE_LOG_FILE:-changelog/changelog-root.yaml}
      - --url=jdbc:postgresql://db:5432/postgres
      - --username=postgres
      - --password=postgres
      - --log-level=debug
      - update
    volumes:
      - ./shared/db-migrations/src/main/resources/changelog:/liquibase/changelog
    networks:
      - backend

  kafka-1:
    image: 'bitnami/kafka:3.8.0'
    environment:
      <<: *kafka-cluster-envs
      KAFKA_CFG_NODE_ID: 1
    volumes:
      - kafka-1-data:/bitnami/kafka
    networks:
      - backend

  kafka-2:
    image: 'bitnami/kafka:3.8.0'
    environment:
      <<: *kafka-cluster-envs
      KAFKA_CFG_NODE_ID: 2
    volumes:
      - kafka-2-data:/bitnami/kafka
    networks:
      - backend

  kafka-3:
    image: 'bitnami/kafka:3.8.0'
    environment:
      <<: *kafka-cluster-envs
      KAFKA_CFG_NODE_ID: 3
    volumes:
      - kafka-3-data:/bitnami/kafka
    networks:
      - backend

  ui:
    image: provectuslabs/kafka-ui:v0.7.2
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8585:8080"
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka-1:9092"
      KAFKA_CLUSTERS_0_NAME: kafka-1
      KAFKA_CLUSTERS_1_BOOTSTRAP_SERVERS: "kafka-2:9092"
      KAFKA_CLUSTERS_1_NAME: kafka-2
      KAFKA_CLUSTERS_2_BOOTSTRAP_SERVERS: "kafka-3:9092"
      KAFKA_CLUSTERS_2_NAME: kafka-3
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - backend

  minio:
    image: quay.io/minio/minio:RELEASE.2024-10-13T13-34-11Z
    command: server --console-address ":9001" http://minio/data
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:?error}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:?error}
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - minio-data:/data
    networks:
      - backend

  cloud-config:
    image: moleus/highload/cloud-config:dev
    working_dir: /app
    volumes:
      - ~/.ssh/highload-cloud-config-ro:/root/.ssh/id_rsa:ro
      - ./config:/app/config
    environment:
#      SPRING_PROFILES_ACTIVE: cloud
      SPRING_PROFILES_ACTIVE: standalone,native
      SPRING_CLOUD_CONFIG_SERVER_GIT_DEFAULT_LABEL: 'pavel/fill-docker-compose-file'
    env_file:
      - .env
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  eureka-server:
    image: moleus/highload/eureka-server:dev
    ports:
      - "8761:8761"
    depends_on:
      cloud-config:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  adoption:
    image: moleus/highload/adoption:dev
    depends_on:
      eureka-server:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    env_file:
      - .env
    <<: *default-healthcheck
    networks:
      - backend

  animal:
    image: moleus/highload/animal:dev
    depends_on:
      eureka-server:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    env_file:
      - .env
    <<: *default-healthcheck
    networks:
      - backend

  api-gateway:
    image: moleus/highload/api-gateway:dev
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  authentication:
    image: moleus/highload/authentication:dev
    depends_on:
      eureka-server:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    env_file:
      - .env
    <<: *default-healthcheck
    networks:
      - backend

  transaction:
    image: moleus/highload/transaction:dev
    depends_on:
      eureka-server:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    env_file:
      - .env
    <<: *default-healthcheck
    networks:
      - backend

volumes:
  postgres-data:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:
  minio-data:

networks:
  backend:
