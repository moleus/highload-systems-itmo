name: Deploy services

on:
  issue_comment:
    types: [ created ]

permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read
  statuses: read

jobs:
  deploy-to-k8s:
    if: ${{ github.event.issue.pull_request }} # only run on pull request comments
    runs-on: ubuntu-latest
    steps:
      - uses: github/branch-deploy@v9.10.0
        id: branch-deploy
        with:
          checks: "required"
          skip_ci: "production"
          trigger: ".deploy"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-deploy.outputs.ref }}

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.K8S_KUBECONFIG_CONTENTS }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Read default version
        id: read-version
        uses: ./.github/actions/read-version

      - name: Parse deployment parameters
        id: parse-params
        uses: actions/github-script@v7
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        env:
          PARSED_PARAMS: ${{ steps.branch-deploy.outputs.parsed_params }}
          TAG: ${{ steps.read-version.outputs.version }}
        with:
          script: |
            const parsedParams = JSON.parse(process.env.PARSED_PARAMS);
            const apps = parsedParams.apps;
            let tag = parsedParams.tag;
            if (!tag) {
              tag = process.env.TAG;
            }
            core.exportVariable('apps', apps);
            core.exportVariable('tag', tag);

      - name: Deploy services
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        run: |
          services_to_deploy="${{ env.apps }}"
          version="${{ env.tag }}"
          echo "Deploying services: $services_to_deploy with tag: $version"
          cd ./deploy
          IFS=' ' read -r -a services <<< "$services_to_deploy"
          for service in "${services[@]}"; do
            helm template -f "${service}-values.yaml" --set image.tag=$version microservice | kubectl apply -n dev -f -
          done
