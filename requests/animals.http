### Add new animal (send 2 requests for the correctness of further tests)

#POST http://highload.duckdns.org/api/v1/animals
POST http://localhost:8080/api/v1/animals
Authorization: Bearer {{$auth.token("adoption-manager-auth")}}
Content-Type: application/json

{
  "name": "Барсик2",
  "type": "Кот",
  "gender": "MALE",
  "is_castrated": true,
  "health_status": "HEALTHY"
}

> {%
    client.test("Test status code", function() {
        client.assert(response.status === 201, "Response status is not 201");
    });

    client.test("Test response body", function() {
        const responseBody = response.body;
        client.assert(responseBody.name === "Барсик2", "Name is not correct");
        client.assert(responseBody.type === "Кот", "Type is not correct");
        client.assert(responseBody.gender === "MALE", "Gender is not correct");
        client.assert(responseBody.is_castrated === true, "Castration status is not correct");
        client.assert(responseBody.health_status === "HEALTHY", "Health status is not correct");
        client.assert(responseBody.id !== undefined, "ID is missing");
    });

%}

### Get all not adopted animals
#GET http://highload.duckdns.org/api/v1/animals?isNotAdopted=true
GET http://localhost:8080/api/v1/animals?isNotAdopted=true
Authorization: Bearer {{$auth.token("customer-auth")}}


### Get all animals
#GET http://highload.duckdns.org/api/v1/animals
GET http://localhost:8080/api/v1/animals
Authorization: Bearer {{$auth.token("customer-auth")}}

> {%
    client.test("Test status code", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}


### Get animal with id 1
#GET http://highload.duckdns.org/api/v1/animals/1
GET http://localhost:8080/api/v1/animals/9
Authorization: Bearer {{$auth.token("customer-auth")}}

> {%
    client.test("Test status code", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Change fields of animal 1
#PUT http://highload.duckdns.org/api/v1/animals/1
PUT http://localhost:8080/api/v1/animals/9
Authorization: Bearer {{$auth.token("adoption-manager-auth")}}
Content-Type: application/json

{
  "name": "Барсик",
  "type": "Кот",
  "gender": "MALE",
  "is_castrated": true,
  "health_status": "HEALTHY"
}

> {%
    client.test("Test status code", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Test response body", function() {
        const responseBody = response.body;
        client.assert(responseBody.name === "Барсик", "Name is not correct");
        client.assert(responseBody.type === "Кот", "Type is not correct");
        client.assert(responseBody.type === "Кот", "Type is not correct");
        client.assert(responseBody.gender === "MALE", "Gender is not correct");
        client.assert(responseBody.is_castrated === true, "Castration status is not correct");
        client.assert(responseBody.health_status === "SICK", "Health status is not correct");
        client.assert(responseBody.id !== undefined, "ID is missing");
    });
%}


### Shows that we can't change animal's gender
PUT http://highload.duckdns.org/api/v1/animals/1
Authorization: Bearer {{$auth.token("adoption-manager-auth")}}
Content-Type: application/json

{
  "name": "Барсик",
  "type": "Кот",
  "gender": "FEMALE",
  "is_castrated": true,
  "health_status": "SICK"
}

> {%
    client.test("Test status code", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });

    client.test("Test error message", function() {
        client.assert(response.body === "Can't change gender");
    });
%}


### Shows that we can't change animal's gender
PUT http://highload.duckdns.org/api/v1/animals/1
Authorization: Bearer {{$auth.token("adoption-manager-auth")}}
Content-Type: application/json

{
  "name": "Барсик",
  "type": "Кот",
  "gender": "MALE",
  "is_castrated": false,
  "health_status": "SICK"
}

> {%
    client.test("Test status code", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });

    client.test("Test error message", function() {
        client.assert(response.body === "Can't cancel castration of an animal");
    });
%}

### Delete animal that doesn't exist
DELETE http://highload.duckdns.org/api/v1/animals/222
Authorization: Bearer {{$auth.token("adoption-manager-auth")}}


> {%
    client.test("Test status code", function() {
        client.assert(response.status === 404, "Response status is not 404");
    });

    client.test("Test error message", function() {
        client.assert(response.body === "Animal with ID 222 not found");
    });
%}

### Delete initial animal
#DELETE http://highload.duckdns.org/api/v1/animals/1
DELETE http://localhost:8080/api/v1/animals/19
Authorization: Bearer {{$auth.token("adoption-manager-auth")}}

> {%
    client.test("Test status code", function() {
        client.assert(response.status === 204, "Response status is not 204");
    });
%}

### Upload image
POST http://highload.duckdns.org/api/v1/animals/images/2
Authorization: Bearer {{$auth.token("adoption-manager-auth")}}
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="file"; filename="test-image.png"
Content-Type: image/png

< ../services/images/src/integration-test/resources/test-image.png
--boundary--

### Get images for animal
GET http://highload.duckdns.org/api/v1/animals/images/2
Authorization: Bearer {{$auth.token("customer-auth")}}

### Delete image
DELETE http://127.0.0.1:8080/api/v1/animals/images/5
Authorization: Bearer {{$auth.token("adoption-manager-auth")}}

### Upload image
POST http://highload.duckdns.org/api/v1/animals/images/2
Authorization: Bearer {{$auth.token("adoption-manager-auth")}}
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="file"; filename="test-image.png"
Content-Type: image/png

< ../services/images/src/integration-test/resources/test-image.png
--boundary--

### Delete image
DELETE http://127.0.0.1:8080/api/v1/animals/images/5
Authorization: Bearer {{$auth.token("adoption-manager-auth")}}
